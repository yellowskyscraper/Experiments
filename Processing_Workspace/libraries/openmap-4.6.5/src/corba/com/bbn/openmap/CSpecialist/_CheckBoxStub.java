package com.bbn.openmap.CSpecialist;


/**
* com/bbn/openmap/CSpecialist/_CheckBoxStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.1"
* from com/bbn/openmap/layer/specialist/Specialist.idl
* Wednesday, March 4, 2009 5:10:38 PM EST
*/

public class _CheckBoxStub extends org.omg.CORBA.portable.ObjectImpl implements com.bbn.openmap.CSpecialist.CheckBox
{

  public String label ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_label", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return label (        );
            } finally {
                _releaseReply ($in);
            }
  } // label

  public void label (String newLabel)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_set_label", true);
                $out.write_string (newLabel);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                label (newLabel        );
            } finally {
                _releaseReply ($in);
            }
  } // label

  public com.bbn.openmap.CSpecialist.CheckButton[] buttons ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_buttons", true);
                $in = _invoke ($out);
                com.bbn.openmap.CSpecialist.CheckButton $result[] = com.bbn.openmap.CSpecialist.CheckButtonsHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return buttons (        );
            } finally {
                _releaseReply ($in);
            }
  } // buttons

  public void buttons (com.bbn.openmap.CSpecialist.CheckButton[] newButtons)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_set_buttons", true);
                com.bbn.openmap.CSpecialist.CheckButtonsHelper.write ($out, newButtons);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                buttons (newButtons        );
            } finally {
                _releaseReply ($in);
            }
  } // buttons

  public void selected (String box_label, com.bbn.openmap.CSpecialist.CheckButton button, String uniqueID)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("selected", false);
                $out.write_string (box_label);
                com.bbn.openmap.CSpecialist.CheckButtonHelper.write ($out, button);
                $out.write_string (uniqueID);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                selected (box_label, button, uniqueID        );
            } finally {
                _releaseReply ($in);
            }
  } // selected

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:CSpecialist/CheckBox:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.Object obj = org.omg.CORBA.ORB.init (args, props).string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     String str = org.omg.CORBA.ORB.init (args, props).object_to_string (this);
     s.writeUTF (str);
  }
} // class _CheckBoxStub
