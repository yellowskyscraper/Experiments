package project.view.graphics.imageticker {    	import flash.display.Sprite;	import flash.display.Shape;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.net.URLRequest;	import flash.display.Loader;		import project.model.Model;	import project.events.AppEvent;	import project.view.graphics.miscellaneous.ImageNext;	import project.view.graphics.text.TitleSecondaryText;	import project.view.graphics.text.CaptionText;		import com.ordinarykids.net.BatchLoader;	import com.ordinarykids.events.BatchLoadEvent;		import gs.TweenLite;	import gs.OverwriteManager;    import gs.easing.Quart;    import gs.easing.Expo;	import gs.TweenMax;	import gs.plugins.ColorMatrixFilterPlugin;////////////////////////////////////////////////////////////////////////////////////////////////////////////|////////////////////////////////////////////////////////////////////////////////////////////////////////////|////////////////////////////////////////////////////////////////////////////////////////////////////////////|////////////////////////////////////////////////////////////////////////////////////////////////////////////|//| Image Slideshow Ticker Object	public class ImageTicker extends Sprite {	        private var _gui 			        :Object;        private var _ID 			        :String;        		private var _imageBackground        :Shape;		private var _imageContainer         :Sprite;		private var _imageMask              :Sprite;				private var _next_button            :ImageNext;		private var _captionTitle           :TitleSecondaryText;		private var _caption                :CaptionText;				private var _pathArray              :Array;		private var _imageArray             :Array;		private var _titleArray             :Array;		private var _descriptionArray       :Array;		private var _loadedCount            :Number = 0;  				private var _nameArray              :Array; 				private var _imageCurrent           :Number = 0;   		private var _imagePrev              :Number = 0;				private var _saturation             :Boolean;////////////////////////////////////////////////////////////////////////////////////////////////////////////|//| Constructor			public function ImageTicker($xml:XML, $obj:Object = null)		{				_gui = $obj;						_ID = _gui.id;						_saturation = (_gui.saturation) ? _gui.saturation : false;   			   			_imageBackground = new Shape();		    _imageBackground.graphics.beginFill(0xFFFFFF);            _imageBackground.graphics.drawRect(0, 0, _gui.w, _gui.h);            _imageBackground.graphics.endFill();            _imageBackground.alpha = 0.4;   			_imageContainer = new Sprite();   			_imageContainer.cacheAsBitmap = true;   			_imageContainer.x = 0;   			_imageContainer.y = 0;   			   			_imageMask = new Sprite();		    _imageMask.graphics.beginFill(0xFFFFFF);            _imageMask.graphics.drawRect(0, 0, _gui.w, _gui.h);            _imageMask.graphics.endFill();            _imageMask.cacheAsBitmap = true;   			_imageMask.x = 0;   			_imageMask.y = 0;			_imageContainer.mask = _imageMask;					//| Next		    _next_button = new ImageNext(_imageBackground.height);		    //_next_button.x = (_gui.arrowside) ? _imageBackground.width : _imageBackground.width - 80;		    _next_button.x = Math.round(_imageBackground.width);		    _next_button.y = Math.round((_imageBackground.height/2));            _next_button.buttonMode = true;		    _next_button.useHandCursor = true;   			_next_button.addEventListener(MouseEvent.CLICK, imageDirectionHandle);			_next_button.addEventListener(MouseEvent.MOUSE_OVER, over);			_next_button.addEventListener(MouseEvent.MOUSE_OUT, out);				//| Caption            _captionTitle = new TitleSecondaryText({text:"Title", w:_imageBackground.width, uppercase:true});            _captionTitle.y = _imageBackground.height + 10;            		    _caption = new CaptionText({text:"Caption"});		    _caption.x = 0;		    _caption.y = _captionTitle.y + _captionTitle.height + 3;   			   		//| Loop and grab Image URL's		    _pathArray = new Array();		    _imageArray = new Array();		    _titleArray = new Array();		    _descriptionArray = new Array();   		   		    var nNum:int = $xml.image.length();   			for(var i:int=0; i< nNum; i++){   			       			    var path:String = $xml.image[i].@path.toString();   			        _pathArray.push(path);   			           			    var image:Sprite = new Sprite();					image.alpha = 0;               	    _imageArray.push(image);                	               	 var tit:String = $xml.image[i].@title.toString();            		_titleArray.push(tit);            		     			var description:String = $xml.image[i].toString();           		    _descriptionArray.push(description);				       			_imageContainer.addChild(image);   			}    			   		//| Add to Stage       		addChild(_imageBackground);   			addChild(_imageContainer);       		addChild(_imageMask);   			addChild(_next_button);   			addChild(_captionTitle);   			addChild(_caption);   			   		//| Begin Loading   		    //if(_gui.addfunc != null) additionalFunctionality($xml);   			imageLoader();			}       ////////////////////////////////////////////////////////////////////////////////////////////////////////////|////////////////////////////////////////////////////////////////////////////////////////////////////////////|//| Load Images        private function imageLoader():void         {        	var ldr:Loader = new Loader();        	var req:URLRequest = new URLRequest(_pathArray[0]);        	ldr.load(req);        	ldr.contentLoaderInfo.addEventListener(Event.COMPLETE, imageLoaded);        	_pathArray.splice(0,1);        }        private function imageLoaded(e:Event):void         {        //| Places Loaded Content into a Bitmap Object        	var image:Bitmap = (Bitmap)(e.target.content);                    //| Add Bitmap to a Reference Pointer to the Image Clip        	var reference:Sprite = _imageArray[_loadedCount];        	    reference.addChild(image);        	            	if(_saturation) TweenMax.to(reference, 0, {colorMatrixFilter:{contrast:1.2, saturation:0}});        	_loadedCount++;        	if (_pathArray.length > 0) imageLoader();        	if (_pathArray.length == 0) imageInit();        }        private function imageInit():void        {                                           			TweenLite.to(_imageArray[_imageCurrent],    1, {alpha:1, ease:Expo.easeIn});            _captionTitle.newtext = _titleArray[_imageCurrent];            _caption.newtext = _descriptionArray[_imageCurrent];        }////////////////////////////////////////////////////////////////////////////////////////////////////////////|////////////////////////////////////////////////////////////////////////////////////////////////////////////|//| Button Conditionals        private function imageDirectionHandle(e:MouseEvent):void        {            _imagePrev = _imageCurrent;            if(_imageCurrent == (_imageArray.length - 1)) _imageCurrent = -1;            _imageCurrent ++;                        var transspeed:Number = 1.5;            TweenLite.to(_imageArray[_imagePrev],     transspeed, {alpha:0, ease:Expo.easeOut});            TweenLite.to(_imageArray[_imageCurrent],  transspeed, {alpha:1, ease:Expo.easeOut});                        _captionTitle.newtext = _titleArray[_imageCurrent];            _caption.newtext = _descriptionArray[_imageCurrent];        }	////////////////////////////////////////////////////////////////////////////////////////////////////////////|////////////////////////////////////////////////////////////////////////////////////////////////////////////|//| About Profile Additional Functionality//| External Access to Image Selection through "Label"                private function additionalFunctionality($xml:XML):void        {            _next_button.visible = false;                        _nameArray = new Array();   		    var nNum:int = $xml.image.length();   			for(var i:int=0; i< nNum; i++){   			    var path:String = $xml.image[i].@name.toString();   			    _nameArray.push(path);   			}                    }                public function displaySpecificImage($newimg:String):void        {            _imagePrev = _imageCurrent;                        if(_imageCurrent == (_imageArray.length - 1)) _imageCurrent = -1;            _imageCurrent ++;               		    var num:int = _nameArray.length;   			for(var i:int=0; i< num; i++){   			    if($newimg == _nameArray[i].toString()) _imageCurrent = i;		    }                        var transspeed:Number = 1.5;            TweenLite.to(_imageArray[_imagePrev],     transspeed, {alpha:0, ease:Expo.easeOut});            TweenLite.to(_imageArray[_imageCurrent],  transspeed, {alpha:1, ease:Expo.easeOut});        }                private function over(e:MouseEvent):void        {            _next_button.over();            saturate();        }        private function out(e:MouseEvent):void        {		    _next_button.out();            desaturate();	        }                        public function saturate():void        {               var num:int = _imageArray.length;            for(var i:int=0; i< num; i++){   			    if(_saturation) TweenMax.to(_imageArray[i], 1, {colorMatrixFilter:{contrast:1, saturation:1}});		    }        }                public function desaturate():void        {               var num:int = _imageArray.length;            for(var i:int=0; i< num; i++){                if(_saturation) TweenMax.to(_imageArray[i], 1, {colorMatrixFilter:{contrast:1.2, saturation:0}});		    }        }////////////////////////////////////////////////////////////////////////////////////////////////////////////|		}}