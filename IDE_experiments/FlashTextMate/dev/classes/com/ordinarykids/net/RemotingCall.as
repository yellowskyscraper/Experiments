/** *	CLASS : RemotingCall *  VERSION : 1.20  *  DATE : 02/08/2009 *  ACTIONSCRIPT VERSION : 3.0  *  AUTHOR : Stephen Braitsch : stephen@ordinarykids.com**/package com.ordinarykids.net {			import flash.net.NetConnection;	import flash.net.Responder;		import flash.events.Event;	import flash.events.NetStatusEvent;		import flash.events.EventDispatcher;    import flash.events.SecurityErrorEvent;			import com.ordinarykids.events.HTTPRequestEvent;		public class RemotingCall extends EventDispatcher	{  		private var _gateway    :String;    		// path to gateway.php in your amfphp installation //		private var _directory	:String; 			// path to the service directory that contains this project's classes //  		private var _class     	:String;    		// name of the class file to target //		private var _method     :String;   	 		// name of the method in the class file to call //				private var _nc         :NetConnection;		private var _rs         :Responder;				private var _response   :Array = [];		// data received from the rpc //				public var debug		:Boolean = false;	// trace output to console //				public function RemotingCall($gateway:String, $dir:String = ''):void		{		    _gateway = $gateway; 			_directory = $dir;			_nc = new NetConnection();			_nc.connect(_gateway);			_nc.addEventListener(NetStatusEvent.NET_STATUS, onNetStatus);			_nc.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError);			_rs = new Responder(onDataComplete, onDataFailure);		    		}				public function call($class:String, $method:String, $args:Array = null):void		{			_class = $class; _method = $method; 		    log("Attempting Remoting Call To : "+_class+'.'+_method);		    _nc.call(_directory+'.'+_class+'.'+_method, _rs, $args);		}		 //- CALL EVENT HANDLERS ----------------------------------------------------------------------				private function onNetStatus(evt:NetStatusEvent):void		{		    log('Type = '+evt.info.level+ ' -- Details = '+evt.info.code);		}				private function onDataComplete($response:*):void		{			log('Remoting Call Completed Successfully');			for (var p:String in $response) log('Remoting Data Received : '+ p + ' : '+$response[p]);			log("-----------------------------------------------");		    dispatchEvent(new HTTPRequestEvent(HTTPRequestEvent.COMPLETE, {method:_method, response:$response}));					}				private function onSecurityError(evt:SecurityErrorEvent):void		{		    log('A Security Event Occurred');			dispatchEvent(new HTTPRequestEvent(HTTPRequestEvent.IO_ERROR));		}				private function onDataFailure(evt:Object):void		{		    log('Attempt to call : '+_directory+'.'+_class+'.'+_method+' failed');		    for (var p:String in evt) log('Failure Info Received : '+ p + ' : '+evt[p]);		    log("-----------------------------------------------");			dispatchEvent(new HTTPRequestEvent(HTTPRequestEvent.IO_ERROR));		}					private function log($msg:String):void		{			if (debug) trace($msg);		}			}	}								