/** *  CLASS : HTTPRequest *  VERSION : 1.10  *  UPDATED : 03/25/2009 *  ACTIONSCRIPT VERSION : 3.0  *  AUTHOR : Stephen Braitsch : stephen@ordinarykids.com**/package com.ordinarykids.net {		import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLVariables;	import flash.net.URLRequestMethod;    import flash.net.URLLoaderDataFormat;		import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.events.HTTPStatusEvent;	import flash.events.SecurityErrorEvent;	import flash.events.EventDispatcher;	    import com.ordinarykids.events.HTTPRequestEvent;/*	Class to load XML, Text and Binary Data Files*/	public class HTTPRequest extends EventDispatcher	{		public static var ROOT_PATH:String = '';		// global static pointer to an assets directory for testing purposes //					private var _id						:uint = 0; 	// unique id for this load instance //	 		 			    private var _loader                 :URLLoader;		    private var _request                :URLRequest;	    private var _file                   :String;    // path to file to be loaded // 		    private var _response               :Object;	// response from the request //		private var _debug                  :Boolean = false;			    			public function HTTPRequest($url:String = null):void		{            _loader = new URLLoader();            _loader.addEventListener(Event.OPEN, onRequestOpened);            _loader.addEventListener(ProgressEvent.PROGRESS, onLoadProgress);            _loader.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);              _loader.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);            _loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError);                      _loader.addEventListener(Event.COMPLETE, onRequestComplete);			_loader.dataFormat = URLLoaderDataFormat.TEXT;					// create the url-request object to be called // 			    _request = new URLRequest();  		    _request.method = URLRequestMethod.POST;		// set the request's url if one was passed into the constructor //			if($url) this.url = $url;		}		 //- PUBLIC SETTERS ----------------------------------------------------------------------						public function set id($id:uint):void		{			_id = $id;		}				public function get id():uint		{			return _id;		}						public function set debug($b:Boolean):void		{            _debug = $b;		}				public function set url($url:String):void {			_file = ROOT_PATH + $url;			_request.url = _file;			log("Setting Request.URL To : "+_file);		}				public function get url():String{			return _file;		}				public function set data($vars:URLVariables):void 		{			_request.data = $vars;			log("URLRequest.Data Property Was Set");		// automatically format the response as variables //	        this.format = URLLoaderDataFormat.VARIABLES;		}				public function set format($fmt:String):void {			_loader.dataFormat = $fmt;		}		 //- PUBLIC METHODS ----------------------------------------------------------------------						public function load($file:String = ''):void		{		// update the request object //    					    if ($file) this.url = $file; 		// and make the actual request //			_loader.load(_request);		}				public function kill():void		{            try { _loader.close();                 } catch (e:Error) {            log("Attempt To Close Loader Object Failed");                }  		              _request = null;		}					 //- STATUS DISPATCHERS ----------------------------------------------------------------------        private function onRequestOpened(evt:Event):void {            log( HTTPRequestEvent.OPEN );        // dispatch //                dispatchEvent(new HTTPRequestEvent(HTTPRequestEvent.OPEN, null));        }			        private function onLoadProgress(evt:ProgressEvent):void {            var bl:Number = evt.bytesLoaded/1024;            var bt:Number = evt.bytesTotal/1024;            log( HTTPRequestEvent.PROGRESS, ' : '+bl.toFixed(3)+' OF '+bt.toFixed(3)+' KBytes Loaded = '+Math.ceil((bl/bt)*100)+' %' );        // dispatch //                        dispatchEvent(new HTTPRequestEvent(HTTPRequestEvent.PROGRESS, {loaded:bl, total:bt}));        }				        private function onRequestComplete(evt:Event):void {		// and save the response //				_response = evt.target.data; 		// log and dispatch success //	            log( HTTPRequestEvent.COMPLETE, ' At : '+_file );            for (var p:String in _response){                log('Response Received : '+p+' = '+_response[p]);            } 			dispatchEvent(new HTTPRequestEvent(HTTPRequestEvent.COMPLETE, _response));        }	 			    	    	 //- INTERNAL ERROR HANDLERS ----------------------------------------------------------------------				private function ioErrorHandler(evt:IOErrorEvent):void		{		    log(HTTPRequestEvent.IO_ERROR, ' : '+_file);		    dispatchEvent(new HTTPRequestEvent(HTTPRequestEvent.IO_ERROR));		}        private function onSecurityError(evt:SecurityErrorEvent):void {            log(HTTPRequestEvent.SECURITY_ERROR, ' : '+_file);            dispatchEvent(new HTTPRequestEvent(HTTPRequestEvent.SECURITY_ERROR));        }        private function httpStatusHandler(evt:HTTPStatusEvent):void {            log(HTTPRequestEvent.HTTP_STATUS, ' : '+evt.status);            dispatchEvent(new HTTPRequestEvent(HTTPRequestEvent.HTTP_STATUS));        } //- OUTPUT LOG ----------------------------------------------------------------------                private function log($type:String, $msg:String = ''):void        {            if (_debug) trace('[ HTTPRequest ] : '+$type+$msg);                    }	         				}	}