/** *  CLASS : XMLBatchRequest *  VERSION : 1.20  *  DATE : 03/25/2009 *  ACTIONSCRIPT VERSION : 3.0  *  AUTHOR : STEPHEN BRAITSCH : stephen@ordinarykids.com**/package com.ordinarykids.net {	import flash.events.Event;	import flash.events.EventDispatcher;	import com.ordinarykids.events.BatchLoadEvent;	import com.ordinarykids.events.XMLRequestEvent;		import com.ordinarykids.events.HTTPRequestEvent;			public class XMLBatchLoader extends EventDispatcher	{	    // private vars //	    private var _files          :XMLList;		// array of string file names //	    private var _path           :String;		// path to images folder //		private var _request        :XMLRequest; 	// single image request object for this batch //		private var _docs			:Array = [];	// array of loaded xml documents //							// counters //			private var _total          :uint = 0;  	// total images to load //	 			private var _loaded         :uint = 0;  	// successful load count //	    private var _debug          :Boolean = false;	// trace events to output window //		/**	 *  Constructor takes an XMLList of file names (Strings) - required 	 *  A path to the directory that contains the images (String) - optional	 *	Unique id for this batch for multiple batch loading - optional	**/			public function XMLBatchLoader($files:XMLList = null)		{ 		    _request = new XMLRequest();		    _request.debug = false;            _request.addEventListener(HTTPRequestEvent.OPEN, onLoadInit);            _request.addEventListener(HTTPRequestEvent.PROGRESS, onLoadProgress);            _request.addEventListener(HTTPRequestEvent.CANCELLED, onLoadFailure);            _request.addEventListener(XMLRequestEvent.COMPLETE, onLoadComplete);	// start the batch load if files were passed into the constructor // 			    if ($files) loadBatch($files);		}				 //- PUBLIC METHODS ----------------------------------------------------------------------				public function set debug($b:Boolean):void		{						_debug = $b;		}				public function loadBatch($files:XMLList, $path:String = ''):void		{      			_files = $files;  _path = $path; 		// reset load counter, total images, and loaded images array //    		    _loaded = 0; 			_total = _files.length(); 		// attempt to load the first image in the files array //            _request.load(_path+_files[_loaded]);		}				 //- LOAD EVENT HANDLERS ----------------------------------------------------------------------		        private function onLoadInit(evt:HTTPRequestEvent):void        {            log( evt.type, " : STARTING FILE "+(_loaded+1)+' OF '+_total);        }	                private function onLoadProgress(evt:HTTPRequestEvent):void        {			var bl:Number = evt.data.loaded;			var bt:Number = evt.data.total; 			dispatchEvent(new BatchLoadEvent(BatchLoadEvent.LOAD_PROGRESS, {loaded:bl, total:bt, position:_loaded+1}));			log( evt.type, ' : '+bl+' OF '+bt+' LOADED = '+Math.ceil((bl/bt)*100)+' %' );        }	          			private function onLoadComplete(evt:XMLRequestEvent):void		{		    _loaded++;		        		    _docs.push(evt.data);	    		// send output to console //    		    log(evt.type, " : SUCCESSFULLY LOADED "+_docs.length+' OF '+_total+' FILES IN THIS BATCH');				// dispatch //		    dispatchEvent(new BatchLoadEvent(BatchLoadEvent.BATCH_PROGRESS, 		                    {loaded:_loaded, total:_total, file:evt.data}));    		// check if there are more images in the queue //*/		    checkLoadQueue()		}				private function onLoadFailure(evt:HTTPRequestEvent):void		{		    log( evt.type, ': FILE #'+(++_loaded) );		// check if there are more files in the queue //		    checkLoadQueue();		}			 //- INSPECT LOAD QUEUE ----------------------------------------------------------------------  		private function checkLoadQueue():void		{			if ((_loaded)!=_total) {		// load the next file in the queue //		        _request.load(_path+_files[_loaded]);    		    }   else{		// we've arrived at the end of the file queue //        		        log("BATCH LOAD COMPLETE");			    dispatchEvent(new BatchLoadEvent(BatchLoadEvent.BATCH_COMPLETE, _docs));		    } 			  		}				 //- OUTPUT LOG ----------------------------------------------------------------------			        private function log($type:String = '', $msg:String = ''):void        {            if (_debug) trace('[ BatchLoadEvent ] : '+$type, $msg);		}			}	}